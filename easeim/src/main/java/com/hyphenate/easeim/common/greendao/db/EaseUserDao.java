package com.hyphenate.easeim.common.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hyphenate.easeui.domain.EaseUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EASE_USER".
*/
public class EaseUserDao extends AbstractDao<EaseUser, Void> {

    public static final String TABLENAME = "EASE_USER";

    /**
     * Properties of entity EaseUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Username = new Property(0, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property IsOwner = new Property(2, boolean.class, "isOwner", false, "IS_OWNER");
        public final static Property InitialLetter = new Property(3, String.class, "initialLetter", false, "INITIAL_LETTER");
        public final static Property Avatar = new Property(4, String.class, "avatar", false, "AVATAR");
        public final static Property Contact = new Property(5, int.class, "contact", false, "CONTACT");
        public final static Property LastModifyTimestamp = new Property(6, long.class, "lastModifyTimestamp", false, "LAST_MODIFY_TIMESTAMP");
        public final static Property ModifyInitialLetterTimestamp = new Property(7, long.class, "modifyInitialLetterTimestamp", false, "MODIFY_INITIAL_LETTER_TIMESTAMP");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(9, String.class, "phone", false, "PHONE");
        public final static Property Gender = new Property(10, int.class, "gender", false, "GENDER");
        public final static Property Sign = new Property(11, String.class, "sign", false, "SIGN");
        public final static Property Birth = new Property(12, String.class, "birth", false, "BIRTH");
        public final static Property Ext = new Property(13, String.class, "ext", false, "EXT");
    }


    public EaseUserDao(DaoConfig config) {
        super(config);
    }
    
    public EaseUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EASE_USER\" (" + //
                "\"USERNAME\" TEXT NOT NULL ," + // 0: username
                "\"NICKNAME\" TEXT," + // 1: nickname
                "\"IS_OWNER\" INTEGER NOT NULL ," + // 2: isOwner
                "\"INITIAL_LETTER\" TEXT," + // 3: initialLetter
                "\"AVATAR\" TEXT," + // 4: avatar
                "\"CONTACT\" INTEGER NOT NULL ," + // 5: contact
                "\"LAST_MODIFY_TIMESTAMP\" INTEGER NOT NULL ," + // 6: lastModifyTimestamp
                "\"MODIFY_INITIAL_LETTER_TIMESTAMP\" INTEGER NOT NULL ," + // 7: modifyInitialLetterTimestamp
                "\"EMAIL\" TEXT," + // 8: email
                "\"PHONE\" TEXT," + // 9: phone
                "\"GENDER\" INTEGER NOT NULL ," + // 10: gender
                "\"SIGN\" TEXT," + // 11: sign
                "\"BIRTH\" TEXT," + // 12: birth
                "\"EXT\" TEXT);"); // 13: ext
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EASE_USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EaseUser entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUsername());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
        stmt.bindLong(3, entity.getIsOwner() ? 1L: 0L);
 
        String initialLetter = entity.getInitialLetter();
        if (initialLetter != null) {
            stmt.bindString(4, initialLetter);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getContact());
        stmt.bindLong(7, entity.getLastModifyTimestamp());
        stmt.bindLong(8, entity.getModifyInitialLetterTimestamp());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
        stmt.bindLong(11, entity.getGender());
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(12, sign);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(13, birth);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(14, ext);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EaseUser entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUsername());
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
        stmt.bindLong(3, entity.getIsOwner() ? 1L: 0L);
 
        String initialLetter = entity.getInitialLetter();
        if (initialLetter != null) {
            stmt.bindString(4, initialLetter);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(5, avatar);
        }
        stmt.bindLong(6, entity.getContact());
        stmt.bindLong(7, entity.getLastModifyTimestamp());
        stmt.bindLong(8, entity.getModifyInitialLetterTimestamp());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(10, phone);
        }
        stmt.bindLong(11, entity.getGender());
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(12, sign);
        }
 
        String birth = entity.getBirth();
        if (birth != null) {
            stmt.bindString(13, birth);
        }
 
        String ext = entity.getExt();
        if (ext != null) {
            stmt.bindString(14, ext);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public EaseUser readEntity(Cursor cursor, int offset) {
        EaseUser entity = new EaseUser( //
            cursor.getString(offset + 0), // username
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.getShort(offset + 2) != 0, // isOwner
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // initialLetter
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // avatar
            cursor.getInt(offset + 5), // contact
            cursor.getLong(offset + 6), // lastModifyTimestamp
            cursor.getLong(offset + 7), // modifyInitialLetterTimestamp
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phone
            cursor.getInt(offset + 10), // gender
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sign
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // birth
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // ext
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EaseUser entity, int offset) {
        entity.setUsername(cursor.getString(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsOwner(cursor.getShort(offset + 2) != 0);
        entity.setInitialLetter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAvatar(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContact(cursor.getInt(offset + 5));
        entity.setLastModifyTimestamp(cursor.getLong(offset + 6));
        entity.setModifyInitialLetterTimestamp(cursor.getLong(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhone(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGender(cursor.getInt(offset + 10));
        entity.setSign(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBirth(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExt(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(EaseUser entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(EaseUser entity) {
        return null;
    }

    @Override
    public boolean hasKey(EaseUser entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
